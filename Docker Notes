An Introduction to Docker
we'll lern what Docker is and how to use it to run and deploy your Flask apps. However, I won't teach you everything there is to know about Docker!
Docker is a software framework for building, running, and managing images and containers.
In order to understand Docker, you need to clarify two questions:

What are Docker containers, and how are they different to Virtual Machines?
What are Docker images?

After this, you'll be ready to create your own Docker images and use those images to create and run containers.

What are Docker images and containers?

I'm sure you have heard of the term "Virtual Machine". A virtual machine is an emulation of an Operating System. For example, if you run a Windows virtual machine on your MacOS computer, it will run a whole copy of Windows so you can run Windows programs.

When you run a Virtual Machine, you can configure what hardware it has access to (e.g. 50% of the host's RAM, 2 CPU cores, etc).

Docker containers are a bit different because they don't emulate an Operating System. They use the Operating System kernel of your computer, and run as a process within the host.

Containers have their own storage and networking, but because they don't have to emulate the operating system and everything that entails, they are much more lightweight.

Looks similar, but the docker -> container section is much more efficient than running a VM because it uses the host's kernel instead of running its own.



What is a kernel? 
An Operating System is made up of two main parts:

The kernel
Files and programs that come with the operating system
The Linux kernel, for example, is used by all Linux Operating Systems (like Ubuntu, Fedora, Debian, etc.).

CAUTION
Since containers use the host's kernel, you can't run a Windows Docker container natively in a MacOS host. Similarly, you can't run a Linux container natively on Windows or MacOS hosts.

How to run Linux containers on Windows or MacOS?
When you use Docker Desktop (which I'll show you in the next lecture), it runs a Linux Virtual Machine for you, which then is used to run your Linux containers.

But aren't you then doing this?

hardware -> macos -> hypervisor -> linux vm -> docker -> container -> container program


And isn't that much less efficient than just running the program in a Linux virtual machine?

Yes. Running Linux containers on MacOS or Windows is "worse" than just running the programs in a Linux VM. However, 99% of the time, you will be running Linux containers in a Linux host, which is much more efficient.

WHY DO WE ALWAYS RUN LINUX CONTAINERS IN A LINUX HOST?
When you want to deploy your applications to share them with your users, you will almost always be running your app in a Linux server (provided by a deployment company, more on that later). There are a few reasons for this. Among them, Linux is free!

Why are containers more efficient than VMs?
From now on let's assume we are running native Linux containers in a Linux host, as that is by far the most common thing to do!

When you run a VM, it runs the entire operating system. However, when you run a container it uses part of the host's Operating System (called the kernel). Since the kernel is already running anyway, there is much less work for Docker to do.

As a result, containers start up faster, use fewer resources, and need much less hard disk space to run.

Can you run an Ubuntu image when the host is Linux but not Ubuntu?
Since the Linux kernel is the same between distributions, and since Docker containers only use the host's kernel, it doesn't matter which distribution you are running as a host. You can run containers of any distribution with any other distribution as a host.

How many containers can you run at once?
Each container uses layers to specify what files and programs they need. For example, if you run two containers which both use the same version of Python, you'll actually only need to store that Python executable once. Docker will take care of sharing the data between containers.

This is why you can run many hundreds of containers in a single host, because there is less duplication of files they use compared to virtual machines.

What does a Docker container run?
If you want to run your Flask app in a Docker container, you need to get (or create) a Docker image that has all the dependencies your Flask app uses, except from the OS kernel:

Python
Dependencies from requirements.txt
Possibly nginx or gunicorn (more on this when we talk about deployment)
AREN'T THERE MORE DEPENDENCIES?
The keen-eyed among you may be thinking: if all you have is the kernel and nothing else, aren't there more dependencies?

For example, Python needs the C programming language to run. So shouldn't we need C in our container also?

Yes!

When we build our Docker image, we will be building it on top of other, pre-built, existing images. Those images come with the lower-level requirements such as compilers, the C language, and most utilities and programs we need.

What is a Docker image?
A Docker image is a snapshot of source code, libraries, dependencies, tools, and everything else (except the Operating System kernel!) that a container needs to run.

There are many pre-built images that you can use. For example, some come with Ubuntu (a Linux distribution). Others come with Ubuntu and Python already installed. You can also make your own images that already have Flask installed (as well as other dependencies your app needs).

COMES WITH UBUNTU?
In the last lecture I mentioned that Docker containers use the host OS kernel, so why does the container need Ubuntu?

Remember that operating systems are kernel + programs/libraries. Although the container uses the host kernel, we may still need a lot of programs/libraries that Ubuntu ships with. An example might be a C language compiler!

This is how you define a Docker image. I'll guide you through how to do this in the next lecture, but bear with me for a second:

FROM python:3.10
EXPOSE 5000
WORKDIR /app
RUN pip install flask
COPY . .
CMD ["flask", "run", "--host", "0.0.0.0"]

This is a Dockerfile, a definition of how to create a Docker image. Once you have this file, you can ask Docker to create the Docker image. Then, after creating the Docker image, you can ask Docker to run it as a container.

Dockerfile ---build--> docker image ---run--> docker container

In this Dockerfile you can see the first line: FROM python:3.10. This tells Docker to first download the python:3.10 image (an image someone else already created), and once that image is created, run the following commands.

WHAT'S IN THE PYTHON IMAGE?
The python:3.10 image is also built using a Dockerfile! You can see the Dockerfile for it here.

You can see it comes FROM another image. There is usually a chain of these, images built upon other images, until you reach the base image. In this case, the base image is running Debian (a Linux distribution).

Where is the base image!?
So, why the chain?

Three main reasons:

So you don't have to write a super long and complex Dockerfile which contains everything you need.
So pre-published images can be shared online, and all you have to do is download them.
So when your own images use the same base image, Docker in your computer only downloads the base image once, saving you a lot of disk space.
Back to our Dockerfile. The commands after FROM... are specific to our use case, and do things like install requirements, copy our source code into the image, and tell Docker what command to run when we start a container from this image.

This separation between images and containers is interesting because once the image is created you can ship it across the internet and:

Share it with other developers.
Deploy it to servers.
Plus once you've downloaded the image (which can take a while), starting a container from it is almost instant since there's very little work to do.





How to run a Docker container
Install Docker Desktop
Docker Desktop is an application to help you manage your images and containers. Download it and install it here: https://www.docker.com/products/docker-desktop/.

Create your Docker image
Next, download the REST API code from Section 3. You can download it here.

If you want to use the code you wrote while following the videos, that's fine! Just make sure it works by running the Flask app locally and testing it with Insomnia REST Client or Postman.

Write the Dockerfile
In your project folder (i.e. the same folder as app.py), we're going to write the Dockerfile.

To do this, make a file called Dockerfile.

CAUTION
Make sure the file is called Dockerfile, and not Dockerfile.txt or anything like that!

Inside the Dockerfile we're going to write this:

FROM python:3.10
EXPOSE 5000
WORKDIR /app
RUN pip install flask
COPY . .
CMD ["flask", "run", "--host", "0.0.0.0"]

Here's a quick breakdown of what each line does:

FROM python:3.10 uses the python:3.10 image as a base.
EXPOSE 5000 is basically documentation1. It tells the user of the Dockerfile that port 5000 is something the running container will use.
WORKDIR /app does it so everything we do in the Docker image will happen in the image's /app directory.
RUN pip install flask runs a command in the image. Here the command is pip install flask, which is what we need to run our app.
COPY . . is a bit cryptic! It copies everything in the current folder (so app.py) into the image's current folder (so /app).
CMD ["flask", "run", "--host", "0.0.0.0"] tells the image what command to run when you start a container. Here the command is flask run --host=0.0.0.0.
TIP
We need --host=0.0.0.0 to make Docker be able to do port forwarding, as otherwise the Flask app will only be accessible within the container, but not outside the container.

Now we need to create the Docker image.

We do this with the docker build command in the terminal.

CAUTION
Make sure to restart your terminal after installing Docker Desktop, so that you have access to the docker program in your terminal.

Open a terminal (in VSCode that's CMD+J or CTRL+J), and run this command:

docker build -t rest-apis-flask-python .

The -t rest-apis-flask-python flag is optional, but tags the image, giving it a name. It can be handy for later! The final . at the end of the command is not a mistake; it tells the command what to build. The . means "the current directory".

This command can take a while to run as it needs to download the python:3.10 image first. You should see quite a lot of output while the command runs.

When the command is finished, you should see this (among other things):

 => [2/4] WORKDIR /app                                                                             0.4s
 => [3/4] RUN pip install flask                                                                    2.9s
 => [4/4] COPY . .                                                                                 0.0s
 => exporting to image                                                                             0.1s
 => => exporting layers                                                                            0.1s
 => => writing image sha256:d9a68a03f868e74bca48567dfc9a0b702d1618941a71b77de12ff14e908ba155       0.0s
 => => naming to docker.io/library/rest-apis-first-rest-api                                        0.0s


And now your image is built! You should be able to see it in the "Images" section of your Docker Desktop app.

Run the Docker container

When we start a Docker container from this image, it will run the flask run command. Remember that by default, flask run starts a Flask app using port 5000.

But the container's ports are not accessible from outside the container by default. We need to tell Docker that when we access a certain port in our computer, those requests and responses should be forwarded to a certain port in our container.

So we'll run the container, but we must remember to forward a port (e.g. 5000) in our computer to port 5000 in the container

To do so, run this command:

docker run -d -p 5000:5000 rest-apis-flask-python

We're passing a few things to docker run:

-d runs the container in the background, so that you can close the terminal and the container keeps running.
-p 5000:5000 maps port 5000 in your computer to port 5000 in the container.
rest-apis-flask-python is the image tag that you want to run.
You should see something like this as your output:

9f3c564ac64a1723069dda0e80becb70d3697d4bfcbcb626cd5add0c65df173f

That's the ID of the container. If you're not using Docker Desktop, you need this ID in order to stop the container later (with docker rm 9f3c564, that's the first few characters of the ID).

And now, if everything has worked, you should be able to access the Flask app just as if it was running without Docker!

DID SOMETHING NOT WORK?
A common error can happen when the port that you tried to forward isn't available (e.g. because something else is already running):

docker: Error response from daemon: driver failed programming external connectivity on endpoint bold_goldwasser (ff58b1755c1d1d0fd6b1dd4f59ab3b903b0e68f320624c4a2495672a735039d5): Bind for 0.0.0.0:5000 failed: port is already allocated.


You have two options: either figure out what is running on port 5000 and shut it down before trying again, or you can change the port that you want to use in your computer:

docker run -dp 5001:5000 rest-apis-flask-python

Try making requests using the URL 127.0.0.1:5000 with Insomnia REST Client or Postman, and you should see it working well!

Insomnia REST Client successfully made a request to the API running in Docker








